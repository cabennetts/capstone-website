{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bolua\\\\Desktop\\\\University of Kansas\\\\Senior Year\\\\Sign-Language-Translator\\\\UI\\\\app\\\\app\\\\src\\\\upload\\\\Upload.js\";\nimport React, { Component } from 'react';\nimport './Upload.css';\nimport Dropzone from '../dropzone/react-dropzone/src/dropzone_comp/Dropzone';\nimport Progress from '../progress/Progress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      req.open(\"POST\", \"http://localhost:8000/upload\");\n      req.send(formData);\n    });\n  }\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ProgressWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Progress, {\n          progress: uploadProgress ? uploadProgress.percentage : 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"CheckIcon\",\n          alt: \"done\",\n          src: \"baseline-check_circle_outline-24px.svg\",\n          style: {\n            opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this);\n    }\n  }\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          files: [],\n          successfullUploaded: false\n        }),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.files.length < 0 || this.state.uploading,\n        onClick: this.uploadFiles,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this);\n    }\n  }\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"Title\",\n        children: \"Upload Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Content\",\n        children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n          onFilesAdded: this.onFilesAdded,\n          disabled: this.state.uploading || this.state.successfullUploaded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Files\",\n          children: this.state.files.map(file => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Row\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"Filename\",\n                children: file.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 29\n              }, this), this.renderProgress(file)]\n            }, file.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Actions\",\n        children: this.renderActions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default Upload;","map":{"version":3,"names":["React","Component","Dropzone","Progress","Upload","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","file","Promise","resolve","reject","req","XMLHttpRequest","formData","FormData","append","name","open","send","renderProgress","percentage","opacity","length","promises","forEach","push","all","e","render","map"],"sources":["C:/Users/bolua/Desktop/University of Kansas/Senior Year/Sign-Language-Translator/UI/app/app/src/upload/Upload.js"],"sourcesContent":["import React, {Component} from 'react'\r\nimport './Upload.css'\r\nimport Dropzone from '../dropzone/react-dropzone/src/dropzone_comp/Dropzone'\r\nimport Progress from '../progress/Progress'\r\n\r\nclass Upload extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        files: [],\r\n        uploading: false,\r\n        uploadProgress: {},\r\n        successfullUploaded: false\r\n      };\r\n  \r\n      this.onFilesAdded = this.onFilesAdded.bind(this);\r\n      this.uploadFiles = this.uploadFiles.bind(this);\r\n      this.sendRequest = this.sendRequest.bind(this);\r\n      this.renderActions = this.renderActions.bind(this);\r\n    }\r\n  \r\n    onFilesAdded(files) {\r\n        this.setState(prevState => ({\r\n          files: prevState.files.concat(files)\r\n        }));\r\n    }\r\n\r\n    sendRequest(file) {\r\n        return new Promise((resolve, reject) => {\r\n          const req = new XMLHttpRequest();\r\n      \r\n          const formData = new FormData();\r\n          formData.append(\"file\", file, file.name);\r\n      \r\n          req.open(\"POST\", \"http://localhost:8000/upload\");\r\n          req.send(formData);\r\n        });\r\n    }\r\n\r\n    renderProgress(file) {\r\n        const uploadProgress = this.state.uploadProgress[file.name];\r\n        if (this.state.uploading || this.state.successfullUploaded) {\r\n          return (\r\n            <div className=\"ProgressWrapper\">\r\n              <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n              <img\r\n                className=\"CheckIcon\"\r\n                alt=\"done\"\r\n                src=\"baseline-check_circle_outline-24px.svg\"\r\n                style={{\r\n                  opacity:\r\n                    uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        }\r\n    }\r\n\r\n    renderActions() {\r\n        if (this.state.successfullUploaded) {\r\n          return (\r\n            <button\r\n                onClick={() =>\r\n                    this.setState({ files: [], successfullUploaded: false })\r\n                }\r\n            >\r\n              Clear\r\n            </button>\r\n          );\r\n        } else {\r\n          return (\r\n            <button\r\n              disabled={this.state.files.length < 0 || this.state.uploading}\r\n              onClick={this.uploadFiles}\r\n            >\r\n              Upload\r\n            </button>\r\n          );\r\n        }\r\n    }\r\n\r\n    async uploadFiles() {\r\n        this.setState({ uploadProgress: {}, uploading: true });\r\n        const promises = [];\r\n        this.state.files.forEach(file => {\r\n            promises.push(this.sendRequest(file));\r\n        });\r\n        try {\r\n            await Promise.all(promises);\r\n        \r\n            this.setState({ successfullUploaded: true, uploading: false });\r\n        } catch (e) {\r\n            this.setState({ successfullUploaded: true, uploading: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"Upload\">\r\n            <span className=\"Title\">Upload Files</span>\r\n            <div className=\"Content\">\r\n                <Dropzone\r\n                onFilesAdded={this.onFilesAdded}\r\n                disabled={this.state.uploading || this.state.successfullUploaded}\r\n                />\r\n                <div />\r\n                <div className=\"Files\">\r\n                    {this.state.files.map(file => {\r\n                        return (\r\n                            <div key={file.name} className=\"Row\">\r\n                            <span className=\"Filename\">{file.name}</span>\r\n                            {this.renderProgress(file)}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className=\"Actions\">{this.renderActions()}</div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default Upload"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}